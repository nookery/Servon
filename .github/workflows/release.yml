name: Release

on:
  push:
    tags:
      - 'v*'  # 只响应 v 开头的标签
  workflow_run:
    workflows:
      - 'Version Bump'
    types:
      - completed
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以确保能获取到标签

      # 如果是通过 workflow_run 触发，需要获取最新标签
      - name: Get latest tag
        if: github.event_name == 'workflow_run'
        run: |
          git fetch --tags
          echo "RELEASE_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      # 如果是通过 push tag 触发，直接使用触发的标签
      - name: Set tag from push
        if: github.event_name == 'push'
        run: |
          echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Get version from package.json
        id: version
        uses: martinbeentjes/npm-get-version-action@v1.3.0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Setup pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build frontend
        run: pnpm run build

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          check-latest: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          VERSION: ${{ steps.version.outputs.current-version }}
        run: |
          # 确保前端资源被正确嵌入
          cp -r cmd/serve/dist/ cmd/serve/dist_build/
          
          # 构建二进制文件，注入版本信息
          go build -ldflags=" \
            -X 'servon/core/libs.Version=$VERSION' \
            -X 'servon/core/libs.CommitHash=$(git rev-parse HEAD)' \
            -X 'servon/core/libs.BuildTime=$(date -u "+%Y-%m-%d %H:%M:%S")'" \
            -o "servon-${{ matrix.os }}-${{ matrix.arch }}"
          sha256sum "servon-${{ matrix.os }}-${{ matrix.arch }}" > "servon-${{ matrix.os }}-${{ matrix.arch }}.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: servon-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            servon-${{ matrix.os }}-${{ matrix.arch }}
            servon-${{ matrix.os }}-${{ matrix.arch }}.sha256

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 如果是通过 workflow_run 触发，需要获取最新标签
      - name: Get latest tag
        if: github.event_name == 'workflow_run'
        run: |
          git fetch --tags
          echo "RELEASE_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      # 如果是通过 push tag 触发，直接使用触发的标签
      - name: Set tag from push
        if: github.event_name == 'push'
        run: |
          echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Get version from package.json
        id: version
        uses: martinbeentjes/npm-get-version-action@v1.3.0

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.current-version }}

          # 创建 release notes
          echo "# Servon ${VERSION}" > release_notes.md
          echo "" >> release_notes.md
          echo "## 安装方法" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo 'curl -fsSL https://raw.githubusercontent.com/nookery/servon/main/install.sh | bash' >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "## SHA256 校验和" >> release_notes.md
          echo "" >> release_notes.md
          echo '```' >> release_notes.md
          cat */servon-*.sha256 >> release_notes.md
          echo '```' >> release_notes.md

          # 创建 release，使用环境变量中的标签
          gh release create "$RELEASE_TAG" \
            --title "Servon ${VERSION}" \
            --notes-file release_notes.md \
            */servon-*

  cleanup:
    name: Cleanup Artifacts
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            servon-*
